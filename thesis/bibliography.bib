@inproceedings{bloemen2017,
title = "Explicit State Model Checking with Generalized B{\"u}chi and Rabin Automata",
abstract = "In the automata theoretic approach to explicit state LTL model checking, the synchronized product of the model and an automaton that represents the negated formula is checked for emptiness. In practice, a (transition-based generalized) B{\"u}chi automaton (TGBA) is used for this procedure.This paper investigates whether using a more general form of acceptance, namely transition-based generalized Rabin automata (TGRAs), improves the model checking procedure. TGRAs can have signi cantly fewer states than TGBAs, however the corresponding emptiness checking procedure is more involved. With recent advances in probabilistic model checking and LTL to TGRA translators, it is only natural to ask whether checking a TGRA directly is more advantageous in practice.We designed a multi-core TGRA checking algorithm and performed experiments on a subset of the models and formulas from the 2015 Model Checking Contest. We observed that our algorithm can be used to replace a TGBA checking algorithm without losing performance. In general, we found little to no improvement by checking TGRAs directly.",
keywords = "Model checking, Explicit state, LTL, omega-automata, on-the-fly, generalised B{\"u}chi Automaton, generalised Rabin Automaton, parallel algorithms, multi-core",
author = "Bloemen, Vinent 
and Duret-Lutz, Alexandre 
and {van de Pol}, Jaco",
year = "2017",
month = "7",
doi = "10.1145/3092282.3092288",
language = "English",
isbn = "978-1-4503-5077-8",
pages = "50--59",
booktitle = "SPIN 2017",
publisher = "Association for Computing Machinery (ACM)",
address = "United States",
}

@InProceedings{spin2013,
author="Babiak, Tom{\'a}{\v{s}}
and Badie, Thomas
and Duret-Lutz, Alexandre
and K{\v{r}}et{\'i}nsk{\'y}, Mojm{\'i}r
and Strej{\v{c}}ek, Jan",
editor="Bartocci, Ezio
and Ramakrishnan, C. R.",
title="Compositional Approach to Suspension and Other Improvements to LTL Translation",
booktitle="Model Checking Software",
year="2013",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="81--98",
abstract="Recently, there was defined a fragment of LTL (containing fairness properties among other interesting formulae) whose validity over a given infinite word depends only on an arbitrary suffix of the word. Building upon an existing translation from LTL to B{\"u}chi automata, we introduce a compositional approach where subformulae of this fragment are translated separately from the rest of an input formula and the produced automata are composed in a way that the subformulae are checked only in relevant accepting strongly connected components of the final automaton. Further, we suggest improvements over some procedures commonly applied to generalized B{\"u}chi automata, namely over generalized acceptance simplification and over degeneralization. Finally we show how existing simulation-based reductions can be implemented in a signature-based framework in a way that improves the determinism of the automaton.",
isbn="978-3-642-39176-7",
doi={10.1007/978-3-642-39176-7_6}
}

@inproceedings{spot,
author = {Duret-Lutz, Alexandre
and Lewkowicz, Alexandre
and Fauchille, Amaury
and Michaud, Thibaud
and Renault, Etienne
and Xu, Laurent},
title = {Spot 2.0 --- a framework for {LTL} and $\omega$-automata
manipulation},
booktitle = {Proceedings of the 14th International Symposium on
Automated Technology for Verification and Analysis
(ATVA'16)},
series = {Lecture Notes in Computer Science},
publisher = {Springer},
volume = {9938},
pages = {122--129},
year = {2016},
month = oct,
pdf = {adl/duret.16.atva2.pdf},
abstract = {We present Spot 2.0, a C++ library with Python bindings
and an assortment of command-line tools designed to
manipulate LTL and $\omega$-automata in batch. New
automata-manipulation tools were introduced in Spot 2.0;
they support arbitrary acceptance conditions, as
expressible in the Hanoi Omega Automaton format. Besides
being useful to researchers who have automata to process,
its Python bindings can also be used in interactive
environments to teach $\omega$-automata and model checking.},
doi = {10.1007/978-3-319-46520-3_8}
}

@MastersThesis{ltl3tela,
AUTHOR = "Major, Juraj",
TITLE = "Překlad LTL na nedeterministické automaty s generickou akceptační podmínkou",
YEAR = "2017",
TYPE = "Diplomová práce",
SCHOOL = "Masarykova univerzita, Fakulta informatiky, Brno",
SUPERVISOR = "František Blahoudek",
URL = "https://is.muni.cz/th/o0rn5/",
}

@Inbook{hungarian_method,
author="Kuhn, Harold W.",
editor="J{\"u}nger, Michael
and Liebling, Thomas M.
and Naddef, Denis
and Nemhauser, George L.
and Pulleyblank, William R.
and Reinelt, Gerhard
and Rinaldi, Giovanni
and Wolsey, Laurence A.",
title="The Hungarian Method for the Assignment Problem",
bookTitle="50 Years of Integer Programming 1958-2008: From the Early Years to the State-of-the-Art",
year="2010",
publisher="Springer Berlin Heidelberg",
address="Berlin, Heidelberg",
pages="29--47",
abstract="This paper has always been one of my favorite ``children,'' combining as it does elements of the duality of linear programming and combinatorial tools from graph theory. It may be of some interest to tell the story of its origin.",
isbn="978-3-540-68279-0",
doi="10.1007/978-3-540-68279-0_2",
url="https://doi.org/10.1007/978-3-540-68279-0_2"
}

@ARTICLE{scipy,
author = {{Virtanen}, Pauli and {Gommers}, Ralf and {Oliphant},
Travis E. and {Haberland}, Matt and {Reddy}, Tyler and
{Cournapeau}, David and {Burovski}, Evgeni and {Peterson}, Pearu
and {Weckesser}, Warren and {Bright}, Jonathan and {van der Walt},
St{\'e}fan J.  and {Brett}, Matthew and {Wilson}, Joshua and
{Jarrod Millman}, K.  and {Mayorov}, Nikolay and {Nelson}, Andrew
R.~J. and {Jones}, Eric and {Kern}, Robert and {Larson}, Eric and
{Carey}, CJ and {Polat}, {\.I}lhan and {Feng}, Yu and {Moore},
Eric W. and {Vand erPlas}, Jake and {Laxalde}, Denis and
{Perktold}, Josef and {Cimrman}, Robert and {Henriksen}, Ian and
{Quintero}, E.~A. and {Harris}, Charles R and {Archibald}, Anne M.
and {Ribeiro}, Ant{\^o}nio H. and {Pedregosa}, Fabian and
{van Mulbregt}, Paul and {Contributors}, SciPy 1. 0},
title = "{SciPy 1.0--Fundamental Algorithms for Scientific
Computing in Python}",
journal = {arXiv e-prints},
year = "2019",
month = "7",
eid = {arXiv:1907.10121},
pages = {arXiv:1907.10121},
archivePrefix = {arXiv},
eprint = {1907.10121},
primaryClass = {cs.MS},
adsurl = {https://ui.adsabs.harvard.edu/abs/2019arXiv190710121V},
adsnote = {Provided by the SAO/NASA Astrophysics Data System}
}

@InProceedings{hoa,
author="Babiak, Tom{\'a}{\v{s}}
and Blahoudek, Franti{\v{s}}ek
and Duret-Lutz, Alexandre
and Klein, Joachim
and K{\v{r}}et{\'i}nsk{\'y}, Jan
and M{\"u}ller, David
and Parker, David
and Strej{\v{c}}ek, Jan",
editor="Kroening, Daniel
and P{\u{a}}s{\u{a}}reanu, Corina S.",
title="The Hanoi Omega-Automata Format",
booktitle="Computer Aided Verification",
year="2015",
publisher="Springer International Publishing",
address="Cham",
pages="479--486",
abstract="We propose a flexible exchange format for {\$}{\$}{\backslash}omega {\$}{\$}-automata, as typically used in formal verification, and implement support for it in a range of established tools. Our aim is to simplify the interaction of tools, helping the research community to build upon other people's work. A key feature of the format is the use of very generic acceptance conditions, specified by Boolean combinations of acceptance primitives, rather than being limited to common cases such as B{\"u}chi, Streett, or Rabin. Such flexibility in the choice of acceptance conditions can be exploited in applications, for example in probabilistic model checking, and furthermore encourages the development of acceptance-agnostic tools for automata manipulations. The format allows acceptance conditions that are either state-based or transition-based, and also supports alternating automata.",
isbn="978-3-319-21690-4"
}

@INPROCEEDINGS{ltl,
author={Pnueli, Amir},
booktitle={18th Annual Symposium on Foundations of Computer Science (sfcs 1977)},
title={The temporal logic of programs},
year={1977},
volume={},
number={},
pages={46-57},
keywords={Logic;Operating systems;Real time systems;Reasoning about programs;Stress;Power system modeling;Clocks;Programming profession;Safety;System recovery},
doi={10.1109/SFCS.1977.32},
ISSN={0272-5428},
month=Oct,}

@inproceedings{rabinizer,
author = {K{\v{r}}et{\'i}nsk{\'y}, Jan 
and Meggendorfer, Tobias 
and Sickert, Salomon 
and Ziegler, Christopher},
title     = {Rabinizer 4: From {LTL} to Your Favourite Deterministic Automaton},
booktitle = {Computer Aided Verification - 30th International Conference, {CAV}
          2018, Held as Part of the Federated Logic Conference, FloC 2018, Oxford,
          UK, July 14-17, 2018, Proceedings, Part {I}},
pages     = {567--577},
year      = {2018},
url       = {https://doi.org/10.1007/978-3-319-96145-3\_30},
doi       = {10.1007/978-3-319-96145-3\_30},
timestamp = {Tue, 14 May 2019 10:00:43 +0200},
}

@inproceedings{randltl,
author = {Duret-Lutz, Alexandre},
year = {2013},
month = {10},
pages = {},
title = {Manipulating LTL formulas using Spot 1.0},
doi = {10.1007/978-3-319-02444-8_31}
}